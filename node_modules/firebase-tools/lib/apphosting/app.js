"use strict";
const fuzzy = require("fuzzy");
const inquirer = require("inquirer");
const apps_1 = require("../management/apps");
const prompt_1 = require("../prompt");
const error_1 = require("../error");
const CREATE_NEW_FIREBASE_WEB_APP = "CREATE_NEW_WEB_APP";
const CONTINUE_WITHOUT_SELECTING_FIREBASE_WEB_APP = "CONTINUE_WITHOUT_SELECTING_FIREBASE_WEB_APP";
const webApps = {
    CREATE_NEW_FIREBASE_WEB_APP,
    CONTINUE_WITHOUT_SELECTING_FIREBASE_WEB_APP,
    getOrCreateWebApp,
    promptFirebaseWebApp,
};
async function getOrCreateWebApp(projectId, firebaseWebAppName, backendId) {
    const webAppsInProject = await (0, apps_1.listFirebaseApps)(projectId, apps_1.AppPlatform.WEB);
    if (webAppsInProject.length === 0) {
        const { displayName, appId } = await createFirebaseWebApp(projectId, {
            displayName: backendId,
        });
        return { name: displayName, id: appId };
    }
    const existingUserProjectWebApps = new Map(webAppsInProject.map((obj) => {
        var _a;
        return [
            (_a = obj.displayName) !== null && _a !== void 0 ? _a : obj.appId,
            obj.appId,
        ];
    }));
    if (firebaseWebAppName) {
        if (existingUserProjectWebApps.get(firebaseWebAppName) === undefined) {
            throw new error_1.FirebaseError(`The web app '${firebaseWebAppName}' does not exist in project ${projectId}`);
        }
        return { name: firebaseWebAppName, id: existingUserProjectWebApps.get(firebaseWebAppName) };
    }
    return await webApps.promptFirebaseWebApp(projectId, backendId, existingUserProjectWebApps);
}
async function promptFirebaseWebApp(projectId, backendId, existingUserProjectWebApps) {
    const existingWebAppKeys = Array.from(existingUserProjectWebApps.keys());
    const firebaseWebAppName = await (0, prompt_1.promptOnce)({
        type: "autocomplete",
        name: "app",
        message: "Which of the following Firebase web apps would you like to associate your backend with?",
        source: (_, input = "") => {
            return new Promise((resolve) => resolve([
                new inquirer.Separator(),
                {
                    name: "Create a new Firebase web app.",
                    value: CREATE_NEW_FIREBASE_WEB_APP,
                },
                {
                    name: "Continue without a Firebase web app.",
                    value: CONTINUE_WITHOUT_SELECTING_FIREBASE_WEB_APP,
                },
                new inquirer.Separator(),
                ...fuzzy.filter(input, existingWebAppKeys).map((result) => {
                    return result.original;
                }),
            ]));
        },
    });
    if (firebaseWebAppName === CREATE_NEW_FIREBASE_WEB_APP) {
        const newFirebaseWebApp = await createFirebaseWebApp(projectId, { displayName: backendId });
        return { name: newFirebaseWebApp.displayName, id: newFirebaseWebApp.appId };
    }
    else if (firebaseWebAppName === CONTINUE_WITHOUT_SELECTING_FIREBASE_WEB_APP) {
        return;
    }
    return { name: firebaseWebAppName, id: existingUserProjectWebApps.get(firebaseWebAppName) };
}
async function createFirebaseWebApp(projectId, options) {
    try {
        return await (0, apps_1.createWebApp)(projectId, options);
    }
    catch (e) {
        if (isQuotaError(e)) {
            throw new error_1.FirebaseError("Unable to create a new web app, the project has reached the quota for Firebase apps. Navigate to your Firebase console to manage or delete a Firebase app to continue. ", { original: e instanceof Error ? e : undefined });
        }
        throw new error_1.FirebaseError("Unable to create a Firebase web app", {
            original: e instanceof Error ? e : undefined,
        });
    }
}
function isQuotaError(error) {
    var _a, _b, _c, _d, _e;
    const original = error.original;
    const code = (original === null || original === void 0 ? void 0 : original.status) ||
        ((_b = (_a = original === null || original === void 0 ? void 0 : original.context) === null || _a === void 0 ? void 0 : _a.response) === null || _b === void 0 ? void 0 : _b.statusCode) ||
        ((_e = (_d = (_c = original === null || original === void 0 ? void 0 : original.context) === null || _c === void 0 ? void 0 : _c.body) === null || _d === void 0 ? void 0 : _d.error) === null || _e === void 0 ? void 0 : _e.code);
    return code === 429;
}
module.exports = webApps;
